// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package option

import "fmt"

type IntSome struct {
	value int
}

type StringSome struct {
	value string
}

func StringIntTry(f func(string) (error, int), x string) interface{} {
	err, r := f(x)
	if err != nil {
		return None{}
	} else {
		return IntSome{r}
	}
}

func StringIntMap(e interface{}, f func(string) (error, int)) interface{} {
	switch e.(type) {
	case None:
		return e
	case StringSome:
		v := e.(StringSome).value
		return StringIntTry(f, v)
	default:
		panic(fmt.Sprintf("Unknown Interface type. Must be None or StringSome. Was type %T", e))
	}
}

func StringIntFlatMap(e interface{}, f func(string) interface{}) interface{} {
	switch e.(type) {
	case None:
		return e
	case StringSome:
		v := e.(StringSome).value
		return f(v)
	default:
		panic(fmt.Sprintf("Unknown Interface type.  Must be None or StringSome. Was type %T", e))
	}
}

func StringIntOrElse(e, other interface{}) interface{} {
	switch e.(type) {
	case None:
		switch other.(type) {
		case None, IntSome:
			return other
		default:
			panic(fmt.Sprintf("Unknown other type.  Must be None or IntSome. Was type %T", other))
		}
	case StringSome:
		return e
	default:
		panic(fmt.Sprintf("Unknown type %T", e))
	}
}
